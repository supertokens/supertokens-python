name: "Test"

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
  push:
    branches:
      - master
      - "v[0-9]+.[0-9]+"
    tags:
      - "(dev-)?v[0-9]+.[0-9]+.[0-9]+"

jobs:
  define-versions:
    runs-on: ubuntu-latest
    outputs:
      fdi-versions: ${{ steps.versions.outputs.fdi-versions }}
      cdi-versions: ${{ steps.versions.outputs.cdi-versions }}
      py-versions: '["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]'
    steps:
      - uses: actions/checkout@v4
      - uses: supertokens/get-supported-versions-action@main
        id: versions
        with:
          has-fdi: true
          has-cdi: true

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: define-versions
    strategy:
      fail-fast: false
      matrix:
        # TODO: Update docker to use correct image from CDI core tags
        py-version: ${{ fromJSON(needs.define-versions.outputs.py-versions) }}
        cdi-version: ${{ fromJSON(needs.define-versions.outputs.cdi-versions) }}
    # services:
    #   core:
    #     # See if this can be done with a simple docker run
    #     # Will allow us to use matrix variables in the image name
    #     image: supertokens/supertokens-postgresql:latest
    #     ports:
    #       - 3567:3567
    #     # TODO: Switch to dev docker images, GHA does not support `command`
    #     # command: '/usr/lib/supertokens/jre/bin/java -classpath "/lib/supertokens/core/*:/lib/supertokens/plugin-interface/*:/lib/supertokens/ee/*" io.supertokens.Main /usr/lib/supertokens DEV host=0.0.0.0 test_mode'
    steps:
      - uses: actions/checkout@v4
      # - uses: supertokens/get-versions-action@main
      #   id: versions
      #   with:
      #     driver-name: python
      #     cdi-version: ${{ matrix.cdi-version }}
      #     fdi-version: '4.0'
      #   env:
      #     SUPERTOKENS_API_KEY: ${{ env.SUPERTOKENS_API_KEY }}
      # - run: |
      #     echo "${{ toJSON(steps.versions.outputs) }}"
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py-version }}
      - name: Create virtual environment and install dependencies
        run: |
          python3 -m venv venv
          source venv/bin/activate
          make dev-install && rm -rf src
      - name: Run tests
        run: |
          source venv/bin/activate
          make test ARGS="--junit-xml=test-results.xml"
      - name: Surface failing tests
        if: always()
        uses: pmeier/pytest-results-action@main
        with:
          path: test-results.xml
          summary: true
          title: '[CDI=${{ matrix.cdi-version }}][py=${{ matrix.py-version }}] Test Results'
